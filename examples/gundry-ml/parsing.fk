{-- ML syntax parsing --}

include prelude
include syntax

-- First is the current sequence of characters consumed during a valid parse
-- Second is the sequence of characters in our input buffer not-yet-consumed
-- by a valid parse
-- Third is the running state of a parent parse.
data PS = None | Top String String PS

interface PState = [State PS]

interface Scan = peek : Char
               | accept : Unit

interface Parser = [Abort,Scan]

shift1Abort : {{[E|Abort]X} -> {[E|Abort,Abort]X}}
shift1Abort m = {(shift <Abort> (shift <Abort> (shift1Abort' m!)))!}

shift1Abort' : <Abort>X -> [E|]{[E|Abort,Abort]X}
shift1Abort'  x           = {x}
shift1Abort' <abort -> k> = {case abort! {x -> (shift1Abort {k x})!}}

shift1Scan : {{[E|Scan]X} -> {[E|Scan,Scan]X}}
shift1Scan m = {(shift <Scan> (shift <Scan> (shift1Scan' m!)))!}

shift1Scan' : <Scan>X -> [E|]{[E|Scan,Scan]X}
shift1Scan'  x           = {x}
shift1Scan' <accept -> k> = {case accept! {x -> (shift1Scan {k x})!}}
shift1Scan' <peek -> k> = {case peek! {x -> (shift1Scan {k x})!}}

match : Char -> [Parser]Unit
match c = if (eqc peek! c) {accept!} {abort!}

peekc : [Console,PState]Char
peekc! =
  case get! {(Top xs [] p) -> let c = inch! in ouch c; put (Top xs [c] p); c
            |(Top xs (c :: ys) p) -> c
            | None -> let c = inch! in ouch c; put (Top [] [c] None); c}

acceptc : [Abort,PState]Unit
acceptc! =
  case get! {(Top xs (c :: ys) p) -> put (Top (c :: xs) ys p)
            | _ -> abort!}

printPS : {PS -> [Console]Unit}
printPS (Top xs ys t) =
  print "Top: (<"; print xs; print ">, <"; print ys; print ">, ";
  printPS t; print ")"
printPS None = print "None"

backtrack : [Abort,Console,PState]X
backtrack! = case get!
  {(Top xs ys t) -> addps (append (rev xs) ys) t; abort!
  |      _       -> abort!}

addps : String -> PS -> [Console,PState]Unit
addps xs (Top ys [] p) = put (Top ys xs p)
addps xs None = put (Top [] xs None)
addps xs t =
  print "error?: (<"; print xs; print ">, "; printPS t; print ")\n"

bind : X -> {X -> Y} -> Y
bind x f  = f x

printState : [Console,PState]Unit
printState! = print "\n"; printPS get!; print "\n"

scanner : <Scan>X -> [Abort,Console,PState]X
scanner   <peek -> k>   = scanner (k peekc!)
scanner   <accept -> k> = scanner (k acceptc!)
scanner x = x

scriber : <Scan>X -> [Scan,State Bool]X
scriber   <peek -> k>   = let x = peek! in scriber (k x)
scriber   <accept -> k> = let x = accept! in
                          if get! {unit} {put true}; scriber (k x)
scriber x = x


tryParse : <Abort>X -> [Abort,Console,PState]X
tryParse   <abort -> _>  = backtrack!
tryParse        x        = x

try : {<Parser>X -> [Abort,Console,PState]X}
try <p> = case get! {(Top xs ys t) ->
                        put (Top [] ys (Top xs [] t)); scanner (tryParse p!)
                    | None -> put (Top [] [] None); scanner (tryParse p!)}

-- This definition of choice typechecks using the shift1Abort trick!
choice : List {[Abort]X} -> [Abort]X
choice    []     = abort!
choice (x :: xs) =  let m = shift1Abort x in catch m! {choice xs}

-- BUG: Typechecker goes into an infinite look typing the thunk below:
---{x -> if get! {abort!} {shift <State> (shift1Scan x)!}}}

some : {{[Abort]X} -> [Abort]List X}
some p = p! :: (shift <Abort> (many p))

many : {{[Abort]X} -> List X}
many p = catch (some p) {[]}

parse : <Abort,PState,Scan>X -> [Abort,Console]X
parse   x   = x
parse   <m> = evalState None (scanner (tryParse m!))

-- Parse a symbol
symbol : String -> [Parser]Unit
symbol (x :: xs) = match x; symbol xs
symbol    []     = unit

pLike : {{[Parser]X} -> {X -> [Parser]Bool} -> [Parser]X}
pLike p f = let x = p! in
            if (f x) {accept!; x} {abort!}

gap : {[Parser]Unit}
gap! = many {pLike peek isSpace}; unit

-- ML specific parsers

lexeme : {{[Parser]X} -> [Parser]X}
lexeme p = let x = p! in gap!; x

reserved : {String -> [Parser]Unit}
reserved x = lexeme {symbol x}

identifier : {[Parser]String}
identifier! = lexeme {some {pLike peek isAlphaNum}}

--BUG: (tryParse parseLet) as the first element of the list below should
-- generate a type error, correct term is {tryParse parseLet!}
parseTm : [Console,Parser,PState]Tm
parseTm! = choice [{try parseLet!}, {var identifier!}]

parseLet : [Console,Parser,PState]Tm
parseLet! = let x = reserved "let"; identifier! in
            let s = reserved "="; parseTm! in
            let t = reserved "in"; parseTm! in bnd x s t

imperative : {[Abort,Console,PState]Unit}
imperative! = try (reserved "make";
                        try (choice [{reserved "it!"}
                                    ,{symbol "install"}]))

prog : [Abort,Console,Scan,PState]Tm
prog! = gap!; let x = parseTm! in symbol ";"; x

main : [Console]Tm
main! = catch (parse prog!) {var "failed"}
