{-- ML syntax parsing --}

include prelude

-- First is the current sequence of characters consumed during a valid parse
-- Second is the sequence of characters in our input buffer not-yet-consumed
-- by a valid parse
-- Third is the running state of a parent parse.
data PS = None | Top String String PS

interface PState = [State PS]

interface Scan = peek : Char
               | accept : Unit

interface Parser = [Abort,Console,PState,Scan]

lift1Abort : {{[E|Abort]X} -> {[E|Abort,Abort]X}}
lift1Abort m = {(lift <Abort> (lift <Abort> (lift1Abort' m!)))!}

lift1Abort' : <Abort>X -> [E|]{[E|Abort,Abort]X}
lift1Abort'  x           = {x}
lift1Abort' <abort -> k> = {case abort! {x -> (lift1Abort {k x})!}}

match : Char -> [Abort,Scan]Unit
match c = if (eqc peek! c) {accept!} {abort!}

peekc : [Console,PState]Char
peekc! =
  case get! {(Top xs [] p) -> let c = inch! in ouch c; put (Top xs [c] p); c
            |(Top xs (c :: ys) p) -> c
            | None -> let c = inch! in ouch c; put (Top [] [c] None); c}

acceptc : [Abort,PState]Unit
acceptc! =
  case get! {(Top xs (c :: ys) p) -> put (Top (c :: xs) ys p)
            | _ -> abort!}

printPS : {PS -> [Console]Unit}
printPS (Top xs ys t) =
  print "Top: (<"; print xs; print ">, <"; print ys; print ">, ";
  printPS t; print ")"
printPS None = print "None"

backtrack : [Abort,Console,PState]X
backtrack! = case get!
  {(Top xs ys t) -> addps (append (rev xs) ys) t; abort!
  |      _       -> abort!}

addps : String -> PS -> [Console,PState]Unit
addps xs (Top ys [] p) = put (Top ys xs p)
addps xs None = put (Top [] xs None)
addps xs t =
  print "error?: (<"; print xs; print ">, "; printPS t; print ")\n"

bind : X -> {X -> Y} -> Y
bind x f  = f x

printState : [Console,PState]Unit
printState! = print "\n"; printPS get!; print "\n"

scanner : <Scan>X -> [Abort,Console,PState]X
scanner   <peek -> k>   = scanner (k peekc!)
scanner   <accept -> k> = scanner (k acceptc!)
scanner x = x

tryParse : <Abort>X -> [Abort,Console,PState]X
tryParse   <abort -> _>  = backtrack!
tryParse        x        = x

try : {<Abort,Scan>X -> [Abort,Console,PState]X}
try <p> = case get! {(Top xs ys t) ->
                        put (Top [] ys (Top xs [] t)); scanner (tryParse p!)
                    | None -> put (Top [] [] None); scanner (tryParse p!)}

-- This definition of choice typechecks using the lift1Abort trick!
choice : List {[Abort]X} -> [Abort]X
choice    []     = abort!
choice (x :: xs) = catch (lift1Abort x)! {choice xs}

some : {{[Abort]X} -> [Abort]List X}
some p = p! :: (lift <Abort> (many p))

many : {{[Abort]X} -> List X}
many p = catch (some p) {[]}

parse : <Abort,PState,Scan>X -> [Abort,Console]X
parse   x   = x
parse   <m> = evalState None (scanner (tryParse m!))

-- Parse a symbol
symbol : String -> [Abort,Scan]Unit
symbol (x :: xs) = match x; symbol xs
symbol    []     = unit

pLike : {{[Abort,Scan]X} -> {X -> [Abort,Scan]Bool} -> [Abort,Scan]X}
pLike p f = let x = p! in
            if (f x) {accept!; x} {abort!}

gap : {[Abort,Scan]Unit}
gap! = many {pLike peek isSpace}; unit

-- ML specific parsers

identifier : {[Abort,Scan]String}
identifier! = some {pLike peek isAlphaNum}

imperative : {[Parser]Unit}
imperative! = try (symbol "make"; gap!;
                        choice [{try (symbol "it!")}
                               ,{try (symbol "install")}])

parsers : [Parser]Unit
parsers! = choice ([imperative
                   ,{try (symbol "lassie")}
                   ,{print identifier!}])

main : [Console]Unit
main! = catch (parse parsers!) {print "\nfailed\n"}
