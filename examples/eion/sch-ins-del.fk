-- non-determinism
-- interface Choice = choice : Bool

-- choose : {Bool -> {[Choice]X} -> {[Choice]X} -> [Choice]X}
-- choose tt p q = p!
-- choose ff p q = q!

map : {{X -> Y} -> List X -> List Y}
map f []        = []
map f (x :: xs) = f x :: map f xs

print : {String -> [Console]Unit}
print s = map ouch s; unit

interface Search = sch : List Int

interface Insert = ins : Int -> Unit

interface Remove = rm : Int

data IO = pInt Int | pStr String

interface PIO = push : List IO -> Unit

listToIO : {List Int -> [0|Console,PIO,Search]List IO}
listToIO    [] = []
listToIO (x :: []) = [pInt x]
listToIO (x :: xs) = pInt x :: pStr "," :: listToIO xs

-- Insert at the end, remove from the start

append : {List X -> List X -> List X}
append []        ys = ys
append (x :: xs) ys = x :: (append xs ys)

proc : {List Int -> <Search>Unit -> <Insert>Unit -> <Remove>Unit ->
       	     [0|Console,PIO]Unit}
proc [] <sch -> s> <ins x -> i> <r> = proc [x] (s []) (i unit) r!
proc (x :: xs) <sch -> s> <ins y -> i> <rm -> r> =
   proc (append xs [y]) (s (x :: xs)) (i unit) (r x)
proc xs <sch -> s> <ins x -> i> unit = proc (x :: xs) (s xs) (i unit) unit
proc (x :: xs)  <sch -> s>  unit  <rm -> r> = proc xs (s (x :: xs)) unit (r x)
proc    xs      <sch -> s>  unit   <r> = proc xs (s xs) unit r!
proc    []         unit  <ins x -> i> <r> = proc [x] unit (i unit) r!
proc (x :: xs)     unit  <ins y -> i> <rm -> r> =
  proc (append xs [y]) unit (i unit) (r x)
proc    xs         unit  <ins y -> i> unit =
  proc (append xs [y]) unit (i unit) unit
proc  (x :: xs) unit unit <rm -> r> = proc xs unit unit (r x)
proc      _     unit unit    <r>    = unit

searcher : {[0|Console,PIO,Search]Unit}
searcher! = let xs = sch! in
            push (append ((pStr "Got : [") :: listToIO xs) [pStr "]\n"]);
	    push [pStr "updating...\n"];
            push (append ((pStr "Got : [") :: listToIO sch!) [pStr "]\n"]);
	    push [pStr "updating...\n"];
            push (append ((pStr "Got : [") :: listToIO sch!) [pStr "]\n"]);
	    unit

inserter : {[0|Console,PIO,Insert]Unit}
inserter! = push [pStr "ins 54; "]; ins 54; push [pStr "ins 23;\n"]; ins 23

deleter : {[0|Console,PIO,Remove]Unit}
deleter! = push [pStr "removing element...\n"];
	   let x = rm! in
	   push [pStr "Removed : ", pInt x , pStr "\n"]

-- A mutex over I/O so the output from the threads don't overlap.
ioMutex : {<PIO>Unit -> [0|Console]Unit}
ioMutex   <push xs -> k> = case xs
  { ((pInt x) :: xs) -> ouint x; ioMutex (k (push xs))
  | ((pStr s) :: xs) -> print s; ioMutex (k (push xs))
  |         []       -> ioMutex (k unit)}
ioMutex     unit        = unit

main : {[0|Console]Unit}
main! = ioMutex (proc [1] searcher! inserter! deleter!)
