{--- Pipes: multihandlers ---}

include prelude

interface Send X = send : X -> Unit
interface Receive X = receive : X

-- send a list of values
sends : {List X -> [Send X]Unit}
sends xs = map send xs; unit

-- receive and concatenate a nil-terminated list of lists
catter : {[Receive (List X)]List X}
catter! = case receive! { []  -> []
                        | xs  -> append xs catter!}

pipe : {<Send X>Unit -> <Receive X>Y -> [Abort]Y}
pipe <send x -> s> <receive -> r> = pipe (s unit) (r x)
pipe <_>           y              = y
pipe unit          <receive -> r> = abort!

doBeDoBeDoNil : {List String}
doBeDoBeDoNil! = ["do", "be", "do", "be", "do", ""]

sendDoBeDoBeDoNil : {[Send String]Unit}
sendDoBeDoBeDoNil! = sends doBeDoBeDoNil!

t1 : {[Abort]String}
t1! = pipe sendDoBeDoBeDoNil! catter!

spacer : [Send String, Receive String]Unit
spacer! = send receive!; send " "; spacer!

t2 : {[Abort]String}
t2! = pipe sendDoBeDoBeDoNil! (pipe spacer! catter!)

catchList : {<Abort>List X -> List X}
catchList <x> = catch x! {[]}

t3 : {String}
t3! = catchList t2!

t4 : {String}
t4! = catchList (pipe (sends ["do", "be", []])
                      (pipe spacer! catter!))

sendsPrint : {List String -> [Console, Send String]Unit}
sendsPrint []        = unit
sendsPrint (s :: ss) = print "Sending: "; print s; ouch '\n'; send s; sendsPrint ss

t5 : {[Console]String}
t5! = catchList (pipe (sendsPrint doBeDoBeDoNil!) catter!)

logSend : {<Send String>X -> [Console, Send String]X}
logSend x             = x
logSend <send s -> k> = print "Sending: "; print s; ouch '\n'; send s; logSend (k unit)

t6 : {[Console]String}
t6! = catchList (pipe (logSend sendDoBeDoBeDoNil!) catter!)

-- Dont delete these lines, they make this program into a unit test.
-- #desc   examples/pipes.fk
-- #flags  ~include examples/
-- #return unit
main: {Unit}
main! = unit
