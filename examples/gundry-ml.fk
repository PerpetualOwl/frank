{-- An algebraic effects and handler implementation of Gundry's
    rational reconstruction algorithm for Hindley-Milner type
    inference. --}

include prelude

{-- Parsing --}

interface Parser = accept : Char -> Unit

parse : <Parser>Unit -> [Console,Abort]Unit
parse   <accept c -> k> = if (eqc inch! c) {parse (k unit)} {abort!}
parse      unit         = unit

-- Parse a symbol
symbol : String -> [Parser]Unit
symbol (x :: xs) = accept x; symbol xs
symbol    []     = unit

{---------------------}
{-- The Main Begins --}
{---------------------}

data Ty = base Nat | arr Ty Ty

data Sch = mono Ty | poly Sch

data Tm = var Nat | lam Tm | app Tm Tm | bnd Tm Tm

data Ctx = emp | buv Ctx Nat | bdv Ctx Nat Ty | btv Ctx Nat Sch | mrk Ctx

data Suffix = nuffin | hole Suffix Nat | defn Suffix Nat Ty

main : {[Console]String}
main! = catch (parse (symbol "hello"); "success!") {"failed!"}
