{--- Modular rollback: computations as data ---}
include prelude

interface LookAhead = peek : Char | accept : Unit

data Log X = start {X}
           | inched (Log X) {Char -> X}
           | ouched (Log X)

input : {Log X [LookAhead, Abort, Console] ->
         Maybe Char ->
         <LookAhead, Abort>X ->
         [Console]X}
input _ _        x             = x
input l (just c) <peek -> k>   = input l (just c) (k c)
input l (just c) <accept -> k> = ouch c; input (ouched l) nothing (k unit)
input l nothing  <accept -> k> = input l nothing (k unit)
input l nothing  <peek -> k>   = case inch! { '\b' -> rollback l
                                            | c    -> input (inched l k) (just c) (k c) }
input l _        <abort -> k>  = rollback l

-- Disabling the Console ability in the parser would require negative
-- adjustments
--
--   input : Log X [LookAhead, Abort] ->
--           Buffer ->
--           <Consle|LookAhead, Abort>X ->
--           [Console]X

rollback : {Log X [LookAhead, Abort, Console] -> [Console]X}
rollback (start p)    = parse p
rollback (ouched l)   = map ouch "\b \b"; rollback l
rollback (inched l k) = input l nothing (k peek!)

parse : {{[LookAhead, Abort, Console]X} -> [Console]X}
parse p = input (start p) nothing p!

-- a basic parser that counts a sequence of zeros
zeros : Int -> [LookAhead, Abort]Int
zeros n = case peek! { '0' -> accept!; zeros (n+1)
                     | ' ' -> accept!; n
                     | c   -> abort!}

t1 : {[Console]Int}
t1! = parse {zeros 0}

-- another parser that tracks bracket nesting
nest : String -> Int -> [LookAhead, Abort]String
nest s 0 = case peek! { '('  -> accept!; nest s 1
                      | '\n' -> accept!; s
                      | c    -> abort! }
nest s n = case peek! { '('  -> accept!; nest s (n+1)
                      | ')'  -> accept!; nest s (n-1)
                      | c    -> accept!; nest (cons c s) n }

t2 : {[Console]String}
t2! = parse {nest "" 0}

-- Dont delete these lines, they make this program into a unit test.
-- #desc   examples/rollback.fk
-- #flags  ~include examples/
-- #return unit

-- just a stub: use --entry-point tX to do something interesting
main : {Unit}
main! = unit
