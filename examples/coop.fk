--- start of standard stuff ---
data Maybe X = just X | nothing

map : {{X -> Y} -> List X -> List Y}
map f []        = []
map f (x :: xs) = f x :: map f xs

reverse' : {List X -> List X -> List X}
reverse' []        ys = ys
reverse' (x :: xs) ys = reverse' xs (x :: ys)

reverse : {List X -> List X}
reverse xs = reverse' xs []

print : {String -> [Console]Unit}
print s = map ouch s; unit
--- end of standard stuff ---



{--- Cooperative concurrency ---}

-- cooperative concurrency interface
interface Co = fork : {[Co]Unit} -> Unit
             | yield : Unit

-- example abstract concurrent computation
test : {[Co [Console], Console]Unit}
test! = print "M1 ";
        fork {print "A1 "; yield!; print "A2 "};
        print "M2 ";
        yield!;
        fork {print "B1 "; yield!; print "B2 "};
        yield!;
        print "M3 ";
        yield!;
        print "\n"

-- queue interface
interface Queue S = enqueue : S -> Unit
                  | dequeue : Maybe S

-- process queue computations
data Proc = proc {[Queue Proc]Unit}

enqProc : {[Queue Proc]Unit} -> [Queue Proc]Unit
enqProc p = enqueue (proc p)

runNext : {[Queue Proc]Unit}
runNext! = case dequeue! { (just (proc x)) -> x!
                         | nothing         -> unit }

-- implementations of cooperative concurrency

-- defer forked processes (with effect pollution)
scheduleBF' : {<Co [Queue Proc]>Unit -> [Queue Proc]Unit}
scheduleBF' <yield -> k>  = enqProc {scheduleBF' (k unit)};
                            runNext!
scheduleBF' <fork p -> k> = enqProc {scheduleBF' p!};
                            scheduleBF' (k unit)
scheduleBF' unit          = runNext!

-- defer forked processes (without effect poluution)
scheduleBF : {<Co>Unit -> [Queue Proc]Unit}
scheduleBF <yield -> k>  = enqProc {scheduleBF (k unit)};
                           runNext!
scheduleBF <fork p -> k> = enqProc {scheduleBF (shift <Queue> p!)};
                           scheduleBF (k unit)
scheduleBF unit          = runNext!

-- eagerly run forked processes
scheduleDF : {<Co>Unit -> [Queue Proc]Unit}
scheduleDF <yield -> k>  = enqProc {scheduleDF (k unit)};
                           runNext!
scheduleDF <fork p -> k> = enqProc {scheduleDF (k unit)};
                           scheduleDF (shift <Queue> p!)
scheduleDF unit          = runNext!

-- FIFO queue implementation using a zipper
fq : {List S -> List S -> <Queue S>X -> X}
fq front        back <enqueue x -> k> = fq front (x :: back) (k unit)
fq []           []   <dequeue -> k>   = fq [] [] (k nothing)
fq []           back <dequeue -> k>   = fq (reverse back) [] (k dequeue!)
fq (x :: front) back <dequeue -> k>   = fq front back (k (just x))
fq front        back x                = x

fifo : {<Queue S>X -> X}
fifo <m> = fq [] [] m!

-- with effect pollution
bfFifo' : {<Co [Queue Proc], Queue Proc>Unit -> Unit}
bfFifo' <m> = fifo (scheduleBF' m!)

bfFifo : {<Co>Unit -> Unit}
bfFifo <m> = fifo (scheduleBF (shift <Queue> m!))

dfFifo : {<Co>Unit -> Unit}
dfFifo <m> = fifo (scheduleDF (shift <Queue> m!))

main : {[Console]Unit}
main! = print "BF':"; bfFifo' test!;
        print "BF: "; bfFifo test!;
        print "DF: "; dfFifo test!
