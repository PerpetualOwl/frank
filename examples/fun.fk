{--- Functional programming with Frank ---}

include prelude

-- (the Unit data type is built in)
-- data Unit = unit

-- (the list data type is built in)
-- data List X = [] | X :: (List X)

t1 : {List Int}
t1! = append [1, 2] [3, 4]

map' : {{X -> [0]Y} -> List X -> [0]List Y}
map' f []        = []
map' f (x :: xs) = f x :: map' f xs

t2 : {List Int}
t2! = map {n -> n+1} [1, 2, 3]

-- (the Console interface is built in)
-- interface Console = inch : Char
--                   | ouch : Char -> Unit

-- t3 has the Console ability - it can do inch and ouch commands
t3 : {[Console]Unit}
t3! = map ouch "Hello world!\n"; unit

-- The signature:
--
--   map : {{X -> Y} -> List X -> List Y}
--
-- is syntactic sugar for:
--
--   map : {{X -> [E|]Y} -> List X -> [E|]List Y}

-- ouch isn't allowed because badPrint doesn't have the Console ability
--
--badPrint : {String -> Unit}
--badPrint s = map ouch s; unit

--- control

-- kay m n:
--   do m, do n, return the result of doing m
kay : {X -> Y -> X}
kay x y = x

t4 : {[0|Console]Char}
t4! = kay (inch!) (ouch 'f')

t5 : {[0|Console]Char}
t5! = print "Please type a character\n"; inch!

-- eager conditional
iffy : Bool -> X -> X -> X
iffy true  t f = t
iffy false t f = f

t6 : {[0|Console]Unit}
t6! = iffy true (print "T\n") (print "F\n")

t7 : {[0|Console]Unit}
t7! = if true {print "T\n"} {print "F\n"}

-- sequencing
-- case : X -> {X -> Y} -> Y
-- case x f = f x

t8 : {[Console]Int}
t8! = case inch! { 'a' -> 65
                 | 'b' -> 66
                 | x   -> -1 }

-- Alternative implementation of `if' using `on'
--
-- if : Bool -> {X} -> {X} -> X
-- if b t e = on b { true  -> t!
--                 | false -> e! }

--- some user-defined interfaces

interface Send X = send : X -> Unit

interface Receive X = receive : X

interface State S = get : S
                  | put : S -> Unit

interface Choice = choice : Bool

{-- Alternative definition for Abort (see prelude) --}
--interface Abort = aborting : Zero
-- abort : {[Abort]X}
-- abort! = case aborting! {}
  -- Zero is uninhabited, so no clauses are needed

foo : {[Console, Abort]Int}
foo! = print "hello\n"; head [1,2,3]

t9 : {[Abort]Int}
t9! = head []

bar : {[Abort]Unit}
bar! = catch (abort!) {abort!}

t10 : {[0]Int}
t10! = catch (head []) { -1 }

t11 : {[0]Int}
t11! = catch (head [42]) { -1 }

t12 : {[0|Console]Int}
t12! = catch (print "hello\n"; head []) { -1 }

-- Dont delete these lines, they make this program into a unit test.
-- #desc   examples/fun.fk
-- #flags  ~include examples/
-- #return Compilation successful! (no main function defined)
