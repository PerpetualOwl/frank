-- begin standard stuff
map : {{X -> Y} -> List X -> List Y}
map f []        = []
map f (x :: xs) = f x :: map f xs

print : {String -> [Console]Unit}
print s = map ouch s; unit

data Bool = false | true

if : Bool -> {X} -> {X} -> X
if true  t f = t!
if false t f = f!
-- end standard stuff


-- Define effects
interface BChoice = bchoose: Bool
interface IChoice = ichoose: Int

-- Basic handlers
boolFix: {<BChoice>X -> X}
boolFix x = x
boolFix <bchoose -> k> = boolFix (k false)

intFix: {<IChoice>X -> X}
intFix x = x
intFix <ichoose -> k> = intFix (k 42)

boolByCons: {<BChoice>X -> [Console]X}
boolByCons x = x
boolByCons <bchoose -> k> = print "true (t) or false (_)? "; case inch!
                            { 't' -> print "t\n"; boolByCons (k true)
                            | _   -> print "_\n"; boolByCons (k false) }

-- Scenario 1: Accumulating Effects
boolIntFix: {<BChoice,IChoice>X -> X}
boolIntFix <m> = boolFix (intFix m!)

boolByConsIntFix: {<BChoice,IChoice>X -> [Console]X}
boolByConsIntFix <m> = boolByCons (intFix m!)

-- Scenario 2: Unintentionally Exposed Intermediate Effects
intByBool: {<IChoice>X -> [BChoice]X}
intByBool x = x
intByBool <ichoose -> k> = let n = if bchoose! { if bchoose! {3} {2} }
                                               { if bchoose! {1} {0} }
                           in intByBool (k n)

-- Bad: BChoice gets exposed.
-- The following signature is desired but cannot be achieved this way:
--   intFix_composed: {<IChoice>X -> X}
-- So we settle with this one:
intFix_composed: {<BChoice,IChoice>X -> X}
intFix_composed <m> = boolFix (intByBool m!)

-- This fixes it - but only because ichoose does not take effect-carrying
-- parameters (which cannot just be re-applied). It therefore is no
-- general solution.
intFix_composed': {<IChoice>X -> X}
intFix_composed' x = x
intFix_composed' <ichoose -> k> = intFix_composed' (k (boolFix (intByBool ichoose!)))

-- Bad: BChoice gets exposed.
-- The following signature is desired but cannot be achieved this way:
--   intByCons: {<IChoice>X -> [Console]X}
-- So we settle with this one:
intByCons: {<BChoice,IChoice>X -> [Console]X}
intByCons <m> = boolByCons (intByBool m!)

-- This fixes it - but only because ichoose does not take effect-carrying
-- parameters (which cannot just be re-applied). It therefore is no
-- general solution.
intByCons': {<IChoice>X -> [Console]X}
intByCons' x = x
intByCons' <ichoose -> k> = intByCons' (k (boolByCons (intByBool ichoose!)))

-- Scenario 3: Intentionally Exposed Intermediate Effects
boolIntFix_composed: {<BChoice,IChoice>X -> X}
boolIntFix_composed <m> = boolFix (intByBool m!)

boolIntByCons: {<BChoice,IChoice>X -> [Console]X}
boolIntByCons <m> = boolByCons (intByBool m!)

incrInt: {<IChoice>X -> [IChoice]X}
incrInt x = x
incrInt <ichoose -> k> = let n = ichoose! in incrInt (k (n + 1))

doubleIncrInt: {<IChoice>X -> [IChoice]X}
doubleIncrInt <m> = incrInt (incrInt m!)


-- For testing
booluser: {[BChoice]Int}
booluser! = let b = bchoose! in if b {3} {7}

intuser: {[IChoice]Int}
intuser! = let i = ichoose! in i

boolintuser: {[BChoice,IChoice]Int}
boolintuser! = let b = bchoose! in
               let i = ichoose! in
               if b {1 + i} {100 + i}

main: {[Console]Int}
main! = intByCons (doubleIncrInt (ichoose!))
