--- start of standard stuff ---
data Maybe X = nothing | just X
data Pair X Y = pair X Y

rev' : {List X -> List X -> List X}
rev' []        ys = ys
rev' (x :: xs) ys = rev' xs (x :: ys)

rev : {List X -> List X}
rev xs = rev' xs []

map : {{X -> Y} -> List X -> List Y}
map f []        = []
map f (x :: xs) = f x :: map f xs

print : {String -> [Console]Unit}
print s = map ouch s; unit
--- end of standard stuff ---

--------------------------------------------------------------------------------
-- Queue interface and fast queue implementation
--------------------------------------------------------------------------------

interface Queue S = enq : S -> Unit
                  | deq : Maybe S

-- Execute a computation along with a queue as state (generalisation of
-- zipQueue from coop-factored.fk)
data ZipQ S = zipq (List S) (List S)

runZipQ: {<Queue S>X -> ZipQ S -> Pair X (ZipQ S)}
runZipQ <enq q -> k> (zipq ps        qs) = runZipQ (k unit)     (zipq ps (q :: qs))
runZipQ <deq -> k>   (zipq []        []) = runZipQ (k nothing)  (zipq [] [])
runZipQ <deq -> k>   (zipq []        qs) = runZipQ (k deq!) (zipq (rev qs) [])
runZipQ <deq -> k>   (zipq (p :: ps) qs) = runZipQ (k (just p)) (zipq ps qs)
runZipQ x            (zipq ps        qs) = pair x (zipq ps qs)

evalZipQ: {<Queue S>X -> ZipQ S -> X}
evalZipQ <t> q = case (runZipQ t! q) { (pair x _) -> x }

evalZipQEmpty : {<Queue S>X -> X}
evalZipQEmpty <m> = evalZipQ m! (zipq [] [])
evalZipQEmpty x   = x

execZipQ: {<Queue S>X -> ZipQ S -> ZipQ S}
execZipQ <t> q = case (runZipQ t! q) { (pair _ q) -> q }

--------------------------------------------------------------------------------
-- Definitions of interfaces, data types
--------------------------------------------------------------------------------

interface Co = fork : {[Co]Unit} -> Unit
             | yield : Unit

-- Multi-item mailbox
data Mailbox X = mbox (Ref (ZipQ X))

interface Actor X = self:    Mailbox X
                  | spawn Y: {[Actor Y]Unit} -> Mailbox Y
                  | recv:    X
                  | send Y:  Mailbox Y -> Y -> Unit

data WithSender X Y = withSender (Mailbox X) Y

--------------------------------------------------------------------------------
-- Example actors
--------------------------------------------------------------------------------

doubleActor: {[Actor (WithSender Int Int)]Unit}
doubleActor! = case recv! { (withSender sender n) -> send sender (n + n) }

divConqActor: {[Actor Int [Console], Console]Unit}
divConqActor! = let childA = spawn doubleActor in
                let childB = spawn doubleActor in
                send childA (withSender self! 1);
                send childB (withSender self! 2);
                print "calculating (1+1) + (2+2)... ";
                case (recv! + recv!) { 6 -> print "6 "
                                     | _ -> print "not 6 " }

doubleSpawningActor: {[Actor Int [Console], Console]Unit}
doubleSpawningActor! = let doubler = spawn doubleActor in
                       send doubler (withSender self! 3);
                       case recv! { 6 -> print "you truly know how to double"
                                  | _ -> print "naw" }

soliloquistActor: {[Actor Int [Console], Console]Unit}
soliloquistActor! = send self! 42;
                    case recv! { 42 -> print "ouh how unexpected"
                               | _  -> print "what did I send again?" }

nicePrintActor: {[Actor String [Console], Console]Unit}
nicePrintActor! = let msg = recv! in
                  print "Hey, a message came in: "; print msg

writingActor: {[Actor Int [Console], Console]Unit}
writingActor! = let you = spawn nicePrintActor in
                send you "important msg"

--------------------------------------------------------------------------------
-- Turn an actor step into a process step
--------------------------------------------------------------------------------

step: {Mailbox X -> <Actor X [RefState, Co[RefState]]>Unit -> [RefState, Co [RefState]]Unit}
step mine         <self -> k> = step mine (k mine)
step mine         <spawn you -> k> = let yours = mbox (new (zipq [] [])) in
                                     fork {step yours you!};
                                     step mine (k yours)
step (mbox mine') <recv -> k> = case (runZipQ deq! (read mine'))
                                { (pair nothing _)  -> yield!;
                                                       step (mbox mine') (k recv!)
                                | (pair (just x) q) -> write mine' q;
                                                       step (mbox mine') (k x) }
step mine         <send (mbox yours') x -> k> = let q  = read yours' in
                                                case (execZipQ (enq x) q)
                                                { q' -> write yours' q';
                                                        step mine (k unit) }
step mine         unit = unit

-- This signature suffers from the issue of unintentially exposed intermediate
-- effects. Thus all the effects listed within <...> will be 'handled away'
-- (consumed). This restriction shall be overcome in the future.
runActor : {<RefState,
             Queue (Proc [RefState]),
             Co [Queue (Proc [RefState]), RefState],
             Actor X [RefState,
                      Queue (Proc [RefState]),
                      Co [Queue (Proc [RefState]), RefState]]>Unit ->
            [RefState]Unit}
runActor <m>  = evalZipQEmpty (roundRobin (step (mbox (new (zipq [] []))) m!))
runActor unit = unit

--------------------------------------------------------------------------------
-- This is the process executer from coop-factored.fk, using a queue to handle
-- multiple processes
--------------------------------------------------------------------------------

data Proc = proc {[Queue Proc]Unit}

pushProc : {{[Queue Proc]Unit} -> [Queue Proc]Unit}
pushProc p = enq (proc p)

popRunProc : {[Queue Proc]Unit}
popRunProc! = case deq! { (just (proc x)) -> x!
                            | nothing         -> unit }

popRunAllProcs : {[Queue Proc]Unit}
popRunAllProcs! = case deq! { (just (proc x)) -> x!; popRunAllProcs!
                                | nothing         -> unit }

roundRobin : {<Co [Queue Proc]>Unit -> [Queue Proc]Unit}
roundRobin <yield -> k>  = pushProc {roundRobin (k unit)}; popRunProc!
roundRobin <fork p -> k> = pushProc {roundRobin p!}; roundRobin (k unit)
roundRobin unit          = popRunAllProcs!

scheduleDF : {<Co [Queue Proc]>Unit -> [Queue Proc]Unit}
scheduleDF <yield -> k>  = pushProc {scheduleDF (k unit)}; popRunProc!
scheduleDF <fork p -> k> = pushProc {scheduleDF (k unit)};
                           scheduleDF p!
scheduleDF unit          = popRunAllProcs!

--------------------------------------------------------------------------------
-- Test an example actor
--------------------------------------------------------------------------------

-- Dont delete these lines, they make this program into a unit test.
-- #desc   examples/actorMultiMailbox.fk
-- #return calculating (1+1) + (2+2)... yay got 6unit

main: {[Console, RefState]Unit}
main! = runActor divConqActor!
