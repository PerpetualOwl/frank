--- start of standard stuff ---
data Maybe X = nothing | just X
data Pair X Y = pair X Y

reverse' : {List X -> List X -> List X}
reverse' []        ys = ys
reverse' (x :: xs) ys = reverse' xs (x :: ys)

reverse : {List X -> List X}
reverse xs = reverse' xs []

map : {{X -> Y} -> List X -> List Y}
map f []        = []
map f (x :: xs) = f x :: map f xs

print : {String -> [Console]Unit}
print s = map ouch s; unit
--- end of standard stuff ---

------------------------------------------------------------------------------
-- Queue interface and FIFO implementation using a zipper
------------------------------------------------------------------------------

interface Queue S = enqueue : S -> Unit
                  | dequeue : Maybe S

-- zipper queue
data ZipQ S = zipq (List S) (List S)

emptyZipQ : {ZipQ S}
emptyZipQ! = zipq [] []

-- FIFO queue implementation using a zipper
-- (returns the remaining queue alongside the final value)
runFifo : {ZipQ S -> <Queue S>X -> Pair X (ZipQ S)}
runFifo (zipq front back)        <enqueue x -> k> = runFifo (zipq front (x :: back)) (k unit)
runFifo (zipq []      [])        <dequeue -> k>   = runFifo emptyZipQ! (k nothing)
runFifo (zipq []      back)      <dequeue -> k>   = runFifo (zipq (reverse back) []) (k dequeue!)
runFifo (zipq (x :: front) back) <dequeue -> k>   = runFifo (zipq front back) (k (just x))
runFifo queue                    x                = pair x queue

-- discard the queue
evalFifo : {<Queue S>X -> ZipQ S -> X}
evalFifo <t> q = case (runFifo q t!) { (pair x _) -> x }

-- start with an empty queue
fifo : {<Queue S>X -> X}
fifo <m> = evalFifo m! (emptyZipQ!)

-- discard the value
execFifo: {<Queue S>X -> ZipQ S -> ZipQ S}
execFifo <t> q = case (runFifo q t!) { (pair _ q) -> q }

--------------------------------------------------------------------------------
-- Definitions of interfaces, data types
--------------------------------------------------------------------------------

interface Co = fork  : {[Co]Unit} -> Unit
             | yield : Unit

data Mailbox X = mbox (Ref (ZipQ X))

interface Actor X = self    : Mailbox X
                  | spawn Y : {[Actor Y]Unit} -> Mailbox Y
                  | recv    : X
                  | send Y  : Mailbox Y -> Y -> Unit

data WithSender X Y = withSender (Mailbox X) Y

--------------------------------------------------------------------------------
-- Example actors
--------------------------------------------------------------------------------

-- rubbish examples
-- TODO: come up with some non-rubbish examples

doubleActor: {[Actor (WithSender Int Int)]Unit}
doubleActor! = case recv! { (withSender sender n) -> send sender (n + n) }

divConqActor: {[Actor Int [Console], Console]Unit}
divConqActor! = let childA = spawn doubleActor in
                let childB = spawn doubleActor in
                send childA (withSender self! 1);
                send childB (withSender self! 2);
                print "calculating (1+1) + (2+2)... ";
                case (recv! + recv!) { 6 -> print "6 "
                                     | _ -> print "not 6 " }

doubleSpawningActor: {[Actor Int [Console], Console]Unit}
doubleSpawningActor! = let doubler = spawn doubleActor in
                       send doubler (withSender self! 3);
                       case recv! { 6 -> print "you truly know how to double"
                                  | _ -> print "naw" }

soliloquistActor: {[Actor Int [Console], Console]Unit}
soliloquistActor! = send self! 42;
                    case recv! { 42 -> print "oh how unexpected"
                               | _  -> print "what did I send again?" }

nicePrintActor: {[Actor String [Console], Console]Unit}
nicePrintActor! = let msg = recv! in
                  print "Hey, a message came in: "; print msg

writingActor: {[Actor Int [Console], Console]Unit}
writingActor! = let you = spawn nicePrintActor in
                send you "important msg"

------------------------------------------------------------------------------
-- Implement an actor computation as a stateful concurrent computation
------------------------------------------------------------------------------

-- liftBody : {{[E|Actor X [E|]]Unit} ->
--             [F|]{[E|Actor X [E|], Co [E|RefState], RefState]Unit}}
-- liftBody m = {lift <RefState, Co> m!}

-- Our syntactic sugar assumes that all instances of the implicit
-- effect variable are instantiated to be the same but they needn't be
-- the same as the ambient effects.
--
-- For liftBody we need exactly that all but the ambient effects be
-- the same.
liftBody : {{[Actor X]Unit} -> [E |]{[Actor X, Co [RefState], RefState]Unit}}
liftBody m = {lift <RefState, Co> m!}


act : {Mailbox X -> <Actor X>Unit -> [Co [RefState], RefState]Unit}
act mine     <self -> k> = act mine (k mine)
act mine     <spawn you -> k> = let yours = mbox (new (emptyZipQ!)) in
                                    fork {act yours (liftBody you)!};
                                    act mine (k yours)
act (mbox m) <recv -> k> = case (runFifo (read m) dequeue!)
                                { (pair nothing _)  -> yield!;
                                                       act (mbox m) (k recv!)
                                | (pair (just x) q) -> write m q;
                                                       act (mbox m) (k x) }
act mine     <send (mbox m) x -> k> = let q = execFifo (enqueue x) (read m) in
                                      write m q;
                                      act mine (k unit)
act mine     unit = unit

runActor : {<Actor X>Unit -> [RefState]Unit}
runActor <m> = bfFifo (act (mbox (new (emptyZipQ!))) (lift <Co> m!))

bfFifo : {<Co>Unit -> Unit}
bfFifo <m> = fifo (scheduleBF (lift <Queue> m!))

------------------------------------------------------------------------------
-- Scheduling as in coop.fk
------------------------------------------------------------------------------

data Proc = proc {[Queue Proc]Unit}

enqProc : {[Queue Proc]Unit} -> [Queue Proc]Unit
enqProc p = enqueue (proc p)

runNext : {[Queue Proc]Unit}
runNext! = case dequeue! { (just (proc x)) -> x!
                         | nothing         -> unit }

-- defer forked processes (without effect pollution)
scheduleBF : {<Co>Unit -> [Queue Proc]Unit}
scheduleBF <yield -> k>  = enqProc {scheduleBF (k unit)};
                           runNext!
scheduleBF <fork p -> k> = enqProc {scheduleBF (lift <Queue> p!)};
                           scheduleBF (k unit)
scheduleBF unit          = runNext!

-- eagerly run forked processes
scheduleDF : {<Co>Unit -> [Queue Proc]Unit}
scheduleDF <yield -> k>  = enqProc {scheduleDF (k unit)};
                           runNext!
scheduleDF <fork p -> k> = enqProc {scheduleDF (k unit)};
                           scheduleDF (lift <Queue> p!)
scheduleDF unit          = runNext!

-----------------------------------------------------------------------------
-- Test an example actor
-----------------------------------------------------------------------------

-- Dont delete these lines, they make this program into a unit test.
-- #desc   examples/actor.fk
-- #return calculating (1+1) + (2+2)... 6 unit

main: {[Console, RefState]Unit}
main! = runActor (lift <RefState> divConqActor!)
