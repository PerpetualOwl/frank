-- #desc Remove some instances via adaptor
-- #return [pair false false, pair false false, pair false false, pair false true, pair true false, pair true true]

data Pair X Y = pair X Y

interface BChoice = choose: Bool

fixTrue: {<BChoice>X -> X}
fixTrue x = x
fixTrue <choose -> k> = fixTrue (k true)

fixFalse: {<BChoice>X -> X}
fixFalse x = x
fixFalse <choose -> k> = fixFalse (k false)

prog: {[BChoice, BChoice]Pair Bool Bool}
prog! = pair (choose!) (<BChoice> choose!)

ff: {Pair Bool Bool}
ff! = fixTrue (fixFalse (fixTrue (fixFalse (<BChoice(s d c b a -> s c a)> prog!))))

ff': {Pair Bool Bool}
ff'! = fixTrue (fixFalse (fixTrue (fixFalse (<BChoice(s z y x -> s z x)> prog!))))

ff'': {Pair Bool Bool}
ff''! = fixTrue (fixFalse (fixTrue (fixFalse (<BChoice(s d c b a -> s c d a a c c a)> prog!))))

ft: {Pair Bool Bool}
ft! = fixTrue (fixFalse (fixTrue (fixFalse prog!)))

tf: {Pair Bool Bool}
tf! = fixTrue (fixFalse (fixTrue (fixFalse (<BChoice(s d c b a -> s d c b)> prog!))))

tt: {Pair Bool Bool}
tt! = fixTrue (fixFalse (fixTrue (fixFalse (<BChoice(s d c b a -> s d c b), BChoice(s c b a -> s c a)> prog!))))

main: {List (Pair Bool Bool)}
main! = [ff!, ff'!, ff''!, ft!, tf!, tt!]
