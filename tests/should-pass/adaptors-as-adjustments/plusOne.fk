-- begin standard stuff
map : {{X -> Y} -> List X -> List Y}
map f []        = []
map f (x :: xs) = f x :: map f xs

-- print : {String -> [Console]Unit}
-- print s = map ouch s; unit

if : Bool -> {X} -> {X} -> X
if true  t f = t!
if false t f = f!
-- end standard stuff

-- Interface definitions
interface IChoice = ichoose: Int

-- Effectful programs
effProg: {[IChoice]Int}
effProg! = ichoose!

-- Basic handlers
fix1: {<IChoice>X -> X}
fix1 v = v
fix1 <ichoose -> k> = fix1 (k 1)

plusOne: {<IChoice>X -> [IChoice]X}
plusOne v              = v
plusOne <ichoose -> k> = let i = ichoose! + 1 in plusOne (k i)

-- -- Scenario 2: Unintentionally Exposed Intermediate Effects: SOLVED!
-- intByBool: {<IChoice, -BChoice>X -> [BChoice]X}
-- intByBool x = x
-- intByBool <ichoose -> k> = let n = if bchoose! { if bchoose! {3} {2} }
--                                                { if bchoose! {1} {0} }
--                            in intByBool (k n)

main: {Int}
main! = fix1 (plusOne (plusOne effProg!))
